from scipy.integrate import quad
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
import scipy.stats as stats
import pandas as pd
pd.options.display.float_format = '{:<.4f}'.format
from scipy.integrate import quad
import numpy as np
import pandas as pd

def normalProbabilityDensity(x):
    constant = 1.0 / np.sqrt(2*np.pi)
    return(constant * np.exp((-x**2) / 2.0) )

x=float(input("enter no"))
z=np.round(x,2)
value=quad(normalProbabilityDensity, np.NINF, z)
print(np.round(value[0],5))

"""
standard_normal_table = pd.DataFrame(data = [],
                                 index = np.round(np.arange(0, 3.5, .1),2),
                                 columns = np.round(np.arange(0.00, .1, .01), 2))

for index in standard_normal_table.index:
    for column in standard_normal_table.columns:
        z = np.round(index + column, 2)
        value, _ = quad(normalProbabilityDensity, np.NINF, z)
        standard_normal_table.loc[index, column] = value

# Formatting to make the table look like a z-table
standard_normal_table.index = standard_normal_table.index.astype(str)
standard_normal_table.columns = [str(column).ljust(4,'0') for column in standard_normal_table.columns]
#print(standard_normal_table)
"""
